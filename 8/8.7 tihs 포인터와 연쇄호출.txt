클래스 하나가 여러 개의 인스턴스를 마치 붕어빵처럼 찍을 수 있는데,
그 인스턴스들을 어떻게 구분할 수 있을까

내부적으로는 this->setID(id); 의 this -> 가 생략된 셈이다

```
public:
	Simple(int id)
	{
		this-> setID(id);
	}

	void setID(int id) { m_id = id; }
	int getID() { return m_id; }
};

```


```
#include <iostream>

using namespace std;

class Simple
{
private:
	int m_id;

public:
	Simple(int id)
	{
		setID(id);
	}

	void setID(int id) { m_id = id; }
	int getID() { return m_id; }
};

int main()
{
	Simple s1(1), s2(2);
	s1.setID(2);
	s2.setID(4);

	// setID라는 함수 자체는 하나에만 존재하고
	// s1, s2가 나누어 쓰는 방식이다.
	// 그럼 setID를 쓰는 인스턴스가 뭔지 어떻게 알 수 있을까?

	// 가장 쉬운 방법은 주소를 찍어보는 것
	cout << &s1 << " " << &s2 << endl;

	return 0;
}
```

근데 굳이 이렇게 주소를 찍지 않아도 this 키워드를 이용하면 바로 
자기 자신에 해당하는 주소를 찍을 수 있다.

```
class Simple
{
private:
	int m_id;

public:
	Simple(int id)
	{
		setID(id);
		// 생성자에서 this 키워드로 주소 찍기
		cout << this << endl;
	}

	void setID(int id) { m_id = id; }
	int getID() { return m_id; }
};
```

즉, this는 자기자신 인스턴스를 가리키는 포인터다


this 퐁니터를 사용하는 기법

chaining member function

```
#include <iostream>

using namespace std;

class Calc
{
private:
	int m_value;

public:
	Calc(int init_value)
		: m_value(init_value)
	{}

	void add(int value) { m_value += value; }
	void sub(int value) { m_value -= value; }
	void mult(int value) { m_value *= value; }

	void print()
	{
		cout << m_value << endl;
	}

};

int main()
{
	Calc cal(10)
	
	// 근데 매번 cal. cal. cal. 치면서 메서드 쓰기 귀찮을 때가 있다
	cal.add(10);
	cal.sub(1);
	cal.mult(2);
	cal.print();


	return 0;
}
```

매번 메서드를 이용하기 위해 cal. 뭐시기 라고 치는게 
번거롭다고 생각이 들 수 있다

이 때 사용할 수 있는 트릭 중 하나가 연쇄호출
자기 자신을 레퍼런스로 리턴해주기

```
#include <iostream>

using namespace std;

class Calc
{
private:
	int m_value;

public:
	Calc(int init_value)
		: m_value(init_value)
	{}

	Calc& add(int value) { m_value += value; return *this;}
	Calc& sub(int value) { m_value -= value; return *this;}
	Calc& mult(int value) { m_value *= value; return *this;}

	void print()
	{
		cout << m_value << endl;
	}

};

int main()
{
	Calc cal(10);
	// 그럼 어차피 리턴받은게 자기 자신이기 때문에 아래와 같은 연산이 가능하다
	cal.add(10).sub(1).mult(2).print();

	// 말하자면 아래와 같은 셈
	// Calc &temp1 = calc.add(10);
	// Calc &temp2 = temp1.sub(1);
	// Calc &temp3 = temp2.mult(2);
	// temp3.print();

	return 0;
}
```