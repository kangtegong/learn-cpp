컴퓨터는 randum number를 만들 능력이 없음
그래서 가짜 랜덤 number를 생성해냄

seed = 시작하는 숫자

오버플로우를 이용해 seed 와는 관련없어보이는 멀리 떨어진 숫자를 사용하는 것 뿐

```
#include <iostream>

using namespace std;

unsigned int PRNG()		// Pseudo Random Number Generator
{
	static unsigned int seed = 5523;	// seed number
	seed = 8253729 * seed + 2396403;
	return seed % 32768;
}

int main() 
{
	// 난수(처럼 보이는 숫자) 100개 출력
	for (int count = 1; count <= 100; ++count)
	{
		cout << PRNG() << "\t";
		if (count % 5 == 0) cout << endl;

	}

	return 0;
}
```

```
#include <iostream>
#include <cstdlib>	// std::radn(), std:srand()

using namespace std;


int main() 
{
	std::srand(5323);	// seed. seed가 동일하면 나오는 랜덤 숫자도 같다

	for (int count = 1; count <= 100; ++count)
	{
		cout << std::rand() << "\t";
		if (count % 5 == 0) cout << endl;
	}

	return 0;
}
```

seed를 그 때 그 때 다르게 만드는 방법 : time을 이용하는 방법

```
#include <iostream>
#include <cstdlib>	// std::radn(), std:srand()
#include <ctime>	// std::time()

using namespace std;


int main() 
{
	// std::srand(5323);	// seed. seed가 동일하면 나오는 랜덤 숫자도 같다
	// 시간관 연동하여 random number 만들기
	std::srand(static_cast<unsigned int>(std::time(0)));

	for (int count = 1; count <= 100; ++count)
	{
		cout << std::rand() << "\t";
		if (count % 5 == 0) cout << endl;
	}

	return 0;
}
```

여기서 유의할 점:
랜덤 넘버를 사용하는 프로그램을 디버깅할 떄는 
시드 넘버를 고정시키고 디버깅해야 한다


특정 정수 사이의 랜덤 넘버 발생시키는 법

간단한 경우 

```
	for (int count = 1; count <= 100; ++count)
	{
		cout << rand() % 4 + 5 << "\t";
		if (count % 5 == 0) cout << endl;
	}
```

직접 정의해서 쓰는 경우 (이거 좀 이해가 안가..)

```
#include <iostream>
#include <cstdlib>	// std::radn(), std:srand()
#include <ctime>	// std::time()

using namespace std;

// 특정 정수 사이의 random number를 발생시키는 방법
int getRandomNumber(int min, int max)
{
	// 여기서 RAND_MAX는 random number로 생성할 때 가장 큰 숫자
	static const double fraction = 1.0 / (RAND_MAX + 1.0);
	return min + static_cast<int>((max - min + 1)* (std::rand()*fraction));
}

int main() 
{

	for (int count = 1; count <= 100; ++count)
	{
		cout << getRandomNumber(5, 8) << "\t";
		if (count % 5 == 0) cout << endl;
	}

	return 0;
}
```


랜덤 라이브러리(C++11) 사용하기

```
#include <iostream>
#include <cstdlib>	// std::radn(), std:srand()
#include <ctime>	// std::time()
#include <random>

using namespace std;

int main()
{	
	// random device 만들기
	std::random_device rd;			// random device로 seed값 만들기
	// 생성기 만들기
	std::mt19937 mesenne(rd());		// mt19937 : random number를 만드는 알고리즘
	// 생성기가 어떤 분포를 따를지, 우리가 사용할 분포 만들기
	std::uniform_int_distribution<> dice(1, 6); // 1이상 6이상 값 선택. 1~6까지의 선택 확률 모두 동일

	for (int count = 1; count <= 20 ; ++count)
		cout << dice(mesenne) << endl;

	return 0;
}
```